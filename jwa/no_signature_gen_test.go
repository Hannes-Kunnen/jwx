// Code generated by tools/cmd/genjwa/main.go. DO NOT EDIT

package jwa_test

import (
	"testing"

	"github.com/lestrrat-go/jwx/v2/jwa"
	"github.com/stretchr/testify/assert"
)

func TestNoSignatureAlgorithm(t *testing.T) {
	t.Parallel()
	t.Run(`accept jwa constant NoSignature`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.NoSignatureAlgorithm
		if !assert.NoError(t, dst.Accept(jwa.NoSignature), `accept is successful`) {
			return
		}
		if !assert.Equal(t, jwa.NoSignature, dst, `accepted value should be equal to constant`) {
			return
		}
	})
	t.Run(`accept the string none`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.NoSignatureAlgorithm
		if !assert.NoError(t, dst.Accept("none"), `accept is successful`) {
			return
		}
		if !assert.Equal(t, jwa.NoSignature, dst, `accepted value should be equal to constant`) {
			return
		}
	})
	t.Run(`accept fmt.Stringer for none`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.NoSignatureAlgorithm
		if !assert.NoError(t, dst.Accept(stringer{src: "none"}), `accept is successful`) {
			return
		}
		if !assert.Equal(t, jwa.NoSignature, dst, `accepted value should be equal to constant`) {
			return
		}
	})
	t.Run(`stringification for none`, func(t *testing.T) {
		t.Parallel()
		if !assert.Equal(t, "none", jwa.NoSignature.String(), `stringified value matches`) {
			return
		}
	})
	t.Run(`bail out on random integer value`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.NoSignatureAlgorithm
		if !assert.Error(t, dst.Accept(1), `accept should fail`) {
			return
		}
	})
	t.Run(`do not accept invalid (totally made up) string value`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.NoSignatureAlgorithm
		if !assert.Error(t, dst.Accept(`totallyInvfalidValue`), `accept should fail`) {
			return
		}
	})
}
